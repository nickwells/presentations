Panic!
When and how to use panic
29 Jul 2019

Nick Wells
Twitter: @nickgwells
https://github.com/nickwells

#==========================================================================
* What I'll be covering

1 - *what* *is* *panic*
2 - what panic shows you
3 - how to regain control after a panic
4 - runtime panics
5 - when and how to panic
6 - when and how to recover

#==========================================================================
* The basics

- Panic is a mechanism for handling and reporting runtime errors
- It shows, in detail, where the problem happened
- Your program will exit
- If you don't want to exit, call recover()
- Be (very) careful when you call recover()

: - If you don't remember anything else, those are the key lessons

#==========================================================================
* panic in Go in a little more detail

panic is
- a built-in function taking one argument of type interface{}
- used by the runtime and the standard library to report errors that can't be caught at compile time

You can call it yourself, like this:

.code src/example3/main.go /START-panic OMIT/,/END-panic OMIT/

Or this:

.code src/example3/main.go /START-panic-err OMIT/,/END-panic-err OMIT/

: - Note that panic is a function and not a keyword - it will appear in the stack trace
: - The function is called gopanic in the runtime code but the compiler does some magic to call it

#==========================================================================
* What happens when you panic?

We'll work through this example

.code -numbers src/example3/main.go /START-panic-behaviour OMIT/,/END-panic-behaviour OMIT/

#==========================================================================
* what happens when you panic - step 1

1 - *Execution* *of* *the* *current* *function* *stops*

: - no more code from the body of the function will be called
: - any return values from the panicking function are lost even if they are named values that had been set before the panic occurs (unless you recover in the function).
: - the function does not return - the stack is not being unwound

#==========================================================================
* what happens when you panic - step 2

1 - Execution of the current function stops ✓
2 - *Any* *deferred* *functions* *are* *run*

: - deferred functions are called in the reverse order they were deferred (Last In, First Out)
: - only those functions deferred before the call to panic are called
: - all the deferred functions including those in any function higher up the call stack are called
: - they are called from the panic function so the call stack in the deferred function will be from the place where the panic occurred. This is useful for reporting errors
: - only deferred functions set in the current goroutine are called. This is sensible behaviour but don't expect all your stacks to be unwound. Cleanup only happens in the panicking goroutine
: - Note that buffered output may not appear if the buffer is not flushed before exiting


#==========================================================================
* What happens when you panic - step 3

1 - Execution of the current function stops ✓
2 - Any deferred functions are run ✓
3 - *The* *panic* *is* *reported*

: - It prints "panic: " and the panic value (whatever was passed to panic()).
: - It prints the stack from the point where the panic occurred - we'll talk about this more later
: - The panic is written to stderr not stdout so  be sure to capture both


#==========================================================================
* What happens when you panic - step 4

1 - Execution of the current function stops ✓
2 - Any deferred functions are run ✓
3 - The panic is reported ✓
4 - *The* *program* *exits*

: - the exit status is 2
: - a programmer can call os.Exit with an exit status of 2 so don't rely on this to mean you've panicked but if it's not 2 then you haven't panicked (unless the value gets changed)

#==========================================================================
* What happens if I panic when I'm already panicking?

If one of your deferred functions itself calls panic()

- The value that any subsequent call to recover will return is replaced with the new panic value
- The new panic location is added to the stack. There's an example of this later in this talk

: - This is more likely than you might think
: - ... your program is already in an unexpected state
: - ... the assumptions you make in the deferred functions may be equally incorrect
: - The default panic behaviour knows about all the panic values and will report them all
: - The recover func only gives you the last value.

#==========================================================================
* What I'll be covering

1 - what is panic ✓
2 - *what* *panic* *shows* *you*
3 - how to regain control after a panic
4 - runtime panics
5 - when and how to panic
6 - when and how to recover

#==========================================================================
* What does panic report (recap)

- it prints "panic: " and the value passed to the panic function
- and the stack trace to the point where panic was called

: - This is the default behaviour of panic
: - This gets done just before it exits

#==========================================================================
* What does the stack trace show me

It shows, for each stack frame:
- The function being called, with the first ten parameter values
- The file name and the line number

Let's see some examples.

: - The parameter values shown are actually the first ten words and some values take more than one word

#==========================================================================
* An example of a runtime panic

.code -numbers src/example2/main.go /START OMIT/,/END OMIT/

: - a runtime panic - divide by zero

#==========================================================================
* panic output from the runtime panic

    panic: runtime error: integer divide by zero
    
    goroutine 1 [running]:
    main.main()
    	/home/ngw/go.presentations/presentations/panic/src/example2/main.go:11 +0x11

: - Here we get a runtime.Error
: - if you want to search for this error you should search for "integer divide by zero"
: - the "runtime error: " part gets added on by the Error() method of the runtime.Error

#==========================================================================
* An example of a panic from the standard library

.code -numbers src/example1/main.go /START OMIT/,/END OMIT/

if we run this code we get a panic and we see the output on the next slide.

: - the problem is that we are declaring two flags (program parameters) both called `f`

#==========================================================================
* panic output from the standard library example

    ./example1 flag redefined: f
    panic: ./example1 flag redefined: f
    
    goroutine 1 [running]:
    flag.(*FlagSet).Var(0xc000056180, 0x4ecba0, 0xc00001c118, 0x4d1c7b, 0x1, 0x4d1e17, 0x4)
    	/usr/local/go/src/flag/flag.go:848 +0x4ae
    flag.(*FlagSet).IntVar(...)
    	/usr/local/go/src/flag/flag.go:647
    flag.(*FlagSet).Int(0xc000056180, 0x4d1c7b, 0x1, 0x2, 0x4d1e17, 0x4, 0xc00001c110)
    	/usr/local/go/src/flag/flag.go:660 +0x8b
    flag.Int(...)
    	/usr/local/go/src/flag/flag.go:667
    main.main()
    	/home/ngw/go.presentations/presentations/panic/src/example1/main.go:14 +0xb2

  
: - The calls to flag.Int and flag.(*FlagSet).IntVar have no params shown (just elipses). They have been inlined.
: - The func flag.(*FlagSet).Int takes the same arguments as flag.Int but there is an extra 'parameter' at the end - this is the return value (a pointer to an int)
: - Note that the methods have an additional parameter at the start, this is a pointer to the receiver
: - The string parameters appear as two values, a pointer to the string and a length

#==========================================================================
* How to show more (or less) information when we panic

You can control how much information gets generated by setting the GOTRACEBACK environment variable to one of the following values:

- none
- single (the default)
- all
- system
- crash

: - you probably don't want to change it from the default value
: - the environment variable value is read at program startup so you can't change it at runtime
: - GOTRACEBACK=none will suppress the goroutine stack traces completely
: - GOTRACEBACK=single (the default) will print a stack trace for just the panicking goroutine ignoring internal runtime functions (including the panic function itself)
: - GOTRACEBACK=all will behave as for single but will report on all user-created goroutines not just the panicking one
: - GOTRACEBACK=system will behave as for all but will also show runtime-created goroutines and internal runtime functions
: - GOTRACEBACK=crash will behave as for system but will also generate a core-dump

#==========================================================================
* What I'll be covering

1 - what is panic ✓
2 - what panic shows you ✓
3 - *how* *to* *regain* *control* *after* *a* *panic*
4 - runtime panics
5 - when and how to panic
6 - when and how to recover

#==========================================================================
* Regaining control after a panic

To prevent a panic from exiting your program you need to recover:
- Set up a deferred function before the panic
- Have the deferred function call the recover() built-in function.

Any panic will not be propagated further. The function where you have
recovered will still return after all its deferred functions have been called

Like this:

.code src/example3/main.go /START-recover OMIT/,/END-recover OMIT/

: - Note that the only code that is called after a panic starts is the code in deferred functions and so it's only in a deferred function that it makes sense to call recover().
: - Any call to recover() not in a deferred function will always return nil and will have no effect.
: - Having a defer...recover() in main() is not useful because main() is already about to return when we get to call recover() and so the program will exit anyway.
: - If you recover in a function it will return normally.
: - Unnamed return values will take their zero values so make sure that these make sense
: - Named return values which have been set prior to the panic will be returned with those values - this is not generally a good thing.

#==========================================================================
* I've recovered, what now?

- Test the return value from recover() - this is the value passed to panic()
- If the return value is non-nil then a panic has occurred and you can try to fix it.
- A panic might have occurred even if the return value is nil

: - You can call panic with a nil value
: - Regardless of the panic value, recover will work in the sense that it will end the panic and stop it propagating up the stack
: - You will get a nil value if you're not panicking so you can't programatically tell that a panic was in progress.
: - It's probably best not to do this.

#==========================================================================
* What I'll be covering

1 - what is panic ✓
2 - what panic shows you ✓
3 - how to regain control after a panic ✓
4 - *runtime* *panics*
5 - when and how to panic
6 - when and how to recover

#==========================================================================
* How can I tell if a panic is a runtime error

The value passed to panic by a runtime error satisfies the runtime.Error interface
so you can test it like this:


.code src/example3/main.go /START-recover-runtime OMIT/,/END-recover-runtime OMIT/

: - The runtime error prefixes the error string with "runtime error: "

#==========================================================================
* What is a runtime error

A runtime.runtimeError value is a renaming of a string but with an Error()
method so that it satisfies the error interface and a RuntimeError() method
(which does nothing) so that it satisfies the runtime.Error interface.

If you want to do something similar you can define something like this:

  type Error interface {
      error
      MypkgError()
  }
  
  type mypkgError string
  
  func (e mypkgError) Error() string {
      return "mypkg error: " + string(e)
  }
  
  func (e mypkgError) MypkgError() {}

#==========================================================================
* Why have a package-specific error type

The advantage of doing this is that you can identify programatically that an
error came from your package by doing a type assertion or a type switch. Like
this:

.code src/example3/main.go /START-type-assertion OMIT/,/END-type-assertion OMIT/

You are using it as a sentinel error type rather than the more common
sentinel error value. It's a safer mechanism than using sentinel error values.

: - Dave Cheney has written about the dangers of sentinel error values (SEV)
: - SEV's are necessarily public and therefore can be changed, for instance to nil. This is a bad thing!

#==========================================================================
* What you see if the recovered error is not of the asserted type

  panic: Whoops! [recovered]
  	panic: interface conversion: interface {} is string, not main.myType

  goroutine 1 [running]:
  main.f5.func1()
  	/home/ngw/go.presentations/presentations/panic/src/example3/main.go:98 +0xd9
  panic(0x49f300, 0x4da880)
  	/usr/local/go/src/runtime/panic.go:679 +0x1b2
  main.f5()
  	/home/ngw/go.presentations/presentations/panic/src/example3/main.go:102 +0x5f
  main.main()
  	/home/ngw/go.presentations/presentations/panic/src/example3/main.go:17 +0x26

: - Note
: - panic knows all the panicked values including the recovered one
: - the deferred function is called from panic, not as the stack unwinds
: - the deferred closure is called main.f5.func1 - a name generated by the compiler

#==========================================================================
* What I'll be covering

1 - what is panic ✓
2 - what panic shows you ✓
3 - how to regain control after a panic ✓
4 - runtime panics ✓
5 - *when* *and* *how* *to* *panic*
6 - when and how to recover

#==========================================================================
* Should you ever panic?

Yes

: - You will see some advice on the Web saying you should never panic but there are some times when it is the right thing to do.

#==========================================================================
* When should you panic?

When something happens at runtime that is an unrecoverable programming error.

You want the program to exit giving details of where the mistake was made.

: - Ideally you would panic as soon as the program starts up - either in an init function or early in main(). If you can detect a problem with the program setup that the compiler can't detect then report it as soon as you can.
: - If there is nothing sensible that a caller of your function can do with an error except exit then you should panic - you're giving the programmer useful information about where the mistake was made.
: - As seen earlier, the flag package will panic if the same flag is used twice. Similarly the regexp.MustCompile func will panic if the regular expression doesn't compile.

#==========================================================================
* What should you pass to panic?

- A simple string will be fine most of the time.
- An error might be appropriate.
- Don't pass nil.

: - If you pass nil you can't tell by the return value from recover() whether you were panicking.
: - You can pass nil by accident. For instance, if you pass an error which you forget to initialise.


#==========================================================================
* How I use panic

If you have a function that returns an object and an error you can provide an
"...OrPanic" variant that simply calls the function and panics if the error
is not nil. For instance:

.code -numbers src/example4/main.go /START-STD OMIT/,/END-STD OMIT/

: - With this style of writing code you can choose which of the two methods you want to call
: - Use the OrPanic variant for programmer-supplied parameters and the error-returning variant for user-supplied parameters
: - The single-value return from the OrPanic variant can be used to initialise a struct

#==========================================================================
* What I'll be covering

1 - what is panic ✓
2 - what panic shows you ✓
3 - how to regain control after a panic ✓
4 - runtime panics ✓
5 - when and how to panic ✓
6 - *when* *and* *how* *to* *recover*

#==========================================================================
* When should you recover?

- *Not* *when* *panic* *is* *reporting* *an* *unrecoverable* *error*

: - In this case you want your program to exit.
: - Particularly if it is happening while you're starting up
: - The default behaviour gives you lots of clues to help you find the problem

#==========================================================================
* When should you recover?

- Not when panic is reporting an unrecoverable error ✓
- *Maybe* *when* *a* *package* *is* *using* *panic* *to* *report* *errors*

: - If the panic is from a package that uses panic as an exception mechanism then you will need to recover.
: - If you disagree with the package author's assessment of the recoverableness of the error you will want to recover and move on.

#==========================================================================
* When should you recover?

- Not when panic is reporting an unrecoverable error ✓
- Maybe when a package is using panic to report errors ✓
- *In* *tests*

: - When you're testing whether your code calls panic correctly you'll need to recover and examine the panic value.
: - This is a perfectly valid place to recover.

#==========================================================================
* When should you recover?

- Not when panic is reporting an unrecoverable error ✓
- Maybe when a package is using panic to report errors ✓
- In tests ✓
- *If* *you* *are* *writing* *a* *server* *that* *must* *always* *be* *available*

: - It may be better to recover and start a replacement server before you exit.
: - You might want to give a chance for other worker goroutines to finish if they can.
: - Unless you know that the panic is benign you should assume that the program is in an unknown state so you want to exit as soon as you safely can.

#==========================================================================
* Using panic/recover as an exception mechanism

- Panic/recover is used sometimes to avoid the need to have checks of errors returned all the way up a deeply nested chain of functions
- This can result in elegant code without repeated error tests
- This mirrors try/throw/catch in C++ or Java

#==========================================================================
* Why shouldn't you use panic/recover as an exception mechanism

It's a form of non-local goto. To find out what your program will do after a
call to panic you need to examine the whole calling stack.

Go already has a way of reporting errors

You are forcing any users of your package to use recover with all the
attendant problems.


#==========================================================================
* Recovery tips

For when you really, really must recover and carry on

#==========================================================================
* Recovery tips - problems you need to address

- a function that has recovered returns with no indication that anything was wrong

: - there are ways to address this and I'll describe one later

#==========================================================================
* Recovery tips - problems you need to address

- the return values from a function with unnamed return values which has recovered from a panic are always the defaults: numbers are zero, bools are false, strings are empty, errors are nil etc.

#==========================================================================
* Recovery tips - problems you need to address

- the status of the program is unknown - it's as if someone has scattered return statements in your code. Transactions will be incomplete, data structures only partially updated.


#==========================================================================
* Recovery tips

- Check to see if the panic value is a runtime error. If it is then consider whether you really want to recover
- Best would be to check that the panic value is of precisely the type you expect and to re-panic if it isn't

: - if you don't want to carry on as if nothing has happened then you should print the stack trace so you can see where it happened and either exit or panic again passing the recovered value
: - to check that the panic value is one you expect you should use a package-specific type just as the runtime does (as described earlier)


#==========================================================================
* Recovery tips

- The best approach, I think, is to give the return values names and set them explicitly when you recover. Like this:

  ...
  func xxx() (i int, s string, err error)
  {
      defer func() {
          if p := recover(); p != nil {
              i = 0
              s = ""
              err = errors.New("panic detected")
              fmt.Println("Panic - recovered:", p)
          }
      }()
  ...

: - This is why passing a nil value to panic is so dangerous - you can't recover properly even if you want to as recover() can't tell that a panic is in progress but any panic will have been stopped.
: - you could examine the stack trace and check if the top of the stack (just before the defer function you are in) is the panic function


#==========================================================================
* What I'll be covering

1 - what is panic ✓
2 - what panic shows you ✓
3 - how to regain control after a panic ✓
4 - runtime panics ✓
5 - when and how to panic ✓
6 - when and how to recover ✓
7 - bonus material

#==========================================================================
* The problems with recover

There are two problems with the current recover function:

1 - You only see the latest panic value
2 - You cannot detect that panic has been called if a nil value is passed

#==========================================================================
* A modest proposal

A new recover function should be added to the language:

  func recoverAll() []interface{}

This should return a slice containing all the panic values (empty if no panic
has occurred); including nil values and panics from deferred functions.

This will allow us to detect a panic even if the panic value has been set to
nil and we gain access to the full stack of panic values rather than just the
last.

: - you test to see if you have panicked by checking the length of the slice
: - an empty slice will always mean that no panic has occurred
: - even this doesn't reveal whether a panic has been recovered but to do that we'd need a slice of structs and a more complicated API
: - the current recover() should then be deprecated

#==========================================================================
* For more details

These slides are available at github.com/nickwells/presentations/panic

You can read the speaker's notes on the slide deck

You'll also find there some example programs and a small program that
demonstrates how panic behaves. You can use this to play around with
recovering and not recovering, with panicking during a panic and see the
different behaviour of functions with named and unnamed return values.